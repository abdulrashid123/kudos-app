import { createAsyncThunk,createSlice } from '@reduxjs/toolkit';

import { getKudosReceived, getUserProfile, getUsers, giveKudos } from './kudosApi';







const initialState = {
    status:"idle",
    data:null,
    profile:null,
    users:null


  };

  export const getUSerProfileData = createAsyncThunk(
    'kudos/getUserProfile',
    async () => {
     
      const response = await getUserProfile();
      return response.data;
    }
  );

  export const getKudosReceivedData = createAsyncThunk(
    'kudos/getKudosReceived',
    async () => {
     
      const response = await getKudosReceived();
      return response.data;
    }
  );

  export const getUsersData = createAsyncThunk(
    'kudos/getUsers',
    async () => {
     
      const response = await getUsers();
      return response.data;
    }
  );

  export const giveKudosData = createAsyncThunk(
    'kudos/giveKudos',
    async (data) => {
     
      const response = await giveKudos(data);
      return response.data;
    }
  );


  export const kudosSlice = createSlice({
    name: 'kudos',
    initialState,
    reducers: {
      clearKudos:() => initialState,

     
    },
    extraReducers: (builder) => {
        builder
          .addCase(getUSerProfileData.pending, (state) => {
            state.status = 'loading';
          })
          .addCase(getUSerProfileData.fulfilled, (state, action) => {
            state.status = 'idle';
            state.profile = action.payload
            
          });
          builder
          .addCase(getKudosReceivedData.pending, (state) => {
            state.status = 'loading';
          })
          .addCase(getKudosReceivedData.fulfilled, (state, action) => {
            state.status = 'idle';
            state.data = action.payload
            
          });
          builder
          .addCase(getUsersData.pending, (state) => {
            state.status = 'loading';
          })
          .addCase(getUsersData.fulfilled, (state, action) => {
            state.status = 'idle';
            state.users = action.payload
            
          });
          builder
          .addCase(giveKudosData.pending, (state) => {
            state.status = 'loading';
          })
          .addCase(giveKudosData.fulfilled, (state, action) => {
            state.status = 'idle';
            state.profile = action.payload
            
          });
          
    }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
  
  });


  export const { clearKudos } = kudosSlice.actions
  export const selectData = state => state.kudos.data
  export const selectKudosStatus = state => state.kudos.status
  export const selectProfile = state => state.kudos.profile
  export const selectUsers = state => state.kudos.users
 
  export default kudosSlice.reducer